name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  # CI environment uses standard service ports
  CI_POSTGRES_PORT: 5432
  CI_REDIS_PORT: 6379
  CI_NEO4J_HTTP_PORT: 7474
  CI_NEO4J_BOLT_PORT: 7687

jobs:
  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run ESLint
        run: |
          cd apps/web
          npm run lint


  # Frontend tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run frontend tests
        run: |
          cd apps/web
          npm run test

      - name: Build frontend
        run: |
          cd apps/web
          npm run build

  # Backend tests with services
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_DB: docgraph_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5.15
        env:
          NEO4J_AUTH: neo4j/test_password
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('apps/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd apps/api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run mypy type checking
        run: |
          cd apps/api
          mypy src/ --ignore-missing-imports --show-error-codes --no-strict-optional || echo "Type checking completed with warnings"

      - name: Run backend unit tests
        run: |
          cd apps/api
          pytest tests/unit/ -v --cov=src --cov-report=xml
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:${{ env.CI_POSTGRES_PORT }}/docgraph_test
          NEO4J_URI: bolt://localhost:${{ env.CI_NEO4J_BOLT_PORT }}
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test_password
          REDIS_URL: redis://localhost:${{ env.CI_REDIS_PORT }}
          JWT_SECRET: test-secret-key

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage.xml
          flags: backend

  # Build and test Docker images
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, frontend-test, backend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          target: production
          push: false
          tags: docgraph-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: false
          tags: docgraph-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests with full stack
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cp .env.example .env.test
          sed -i 's/localhost:5433/localhost:5432/g' .env.test
          sed -i 's/localhost:7688/localhost:7687/g' .env.test
          sed -i 's/localhost:6380/localhost:6379/g' .env.test

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.dev.yml --env-file .env.test up -d postgres redis neo4j
          sleep 30

          # Wait for services to be healthy
          timeout 60s bash -c 'until docker-compose -f docker-compose.dev.yml exec -T postgres pg_isready -U docgraph_user; do sleep 2; done'
          timeout 60s bash -c 'until docker-compose -f docker-compose.dev.yml exec -T redis redis-cli -a secure_dev_redis_password ping | grep -q PONG; do sleep 2; done'
          timeout 60s bash -c 'until docker-compose -f docker-compose.dev.yml exec -T neo4j cypher-shell -u neo4j -p secure_dev_neo4j_password "RETURN 1" > /dev/null 2>&1; do sleep 2; done'

          echo "âœ… All services are healthy"

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.dev.yml down -v

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run npm audit
        run: |
          cd apps/web
          npm audit --audit-level=moderate

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # Deployment readiness check
  deploy-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [lint, frontend-test, backend-test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd apps/web
          npm ci

      - name: Build frontend application
        run: |
          cd apps/web
          npm run build

      - name: Check build artifacts
        run: |
          test -d apps/web/dist || (echo "Frontend build failed" && exit 1)
          echo "âœ… Frontend build artifacts present"

      - name: Deployment ready notification
        run: |
          echo "ðŸš€ All checks passed - deployment ready!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"