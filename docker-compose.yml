version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: docgraph-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-docgraph_dev}
      POSTGRES_USER: ${POSTGRES_USER:-docgraph_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_dev_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-docgraph_user} -d ${POSTGRES_DB:-docgraph_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docgraph-network

  # Neo4j graph database
  neo4j:
    image: neo4j:5.15
    container_name: docgraph-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH:-neo4j/secure_dev_neo4j_password}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"  # HTTP
      - "${NEO4J_BOLT_PORT:-7687}:7687"  # Bolt
    volumes:
      - ./data/neo4j/data:/data
      - ./data/neo4j/logs:/logs
      - ./data/neo4j/import:/var/lib/neo4j/import
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "secure_dev_neo4j_password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docgraph-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: docgraph-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_dev_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-secure_dev_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docgraph-network

  # Frontend React application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: docgraph-web
    ports:
      - "${WEB_PORT:-3000}:80"
    depends_on:
      api:
        condition: service_healthy
    environment:
      - NODE_ENV=production
    networks:
      - docgraph-network
    profiles:
      - full

  # Backend FastAPI application
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: docgraph-api
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://docgraph_user:secure_dev_password@postgres:5432/docgraph_dev
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=secure_dev_neo4j_password
      - REDIS_URL=redis://:secure_dev_redis_password@redis:6379
      - JWT_SECRET=generate-secure-random-key-for-development
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - docgraph-network
    profiles:
      - full

networks:
  docgraph-network:
    driver: bridge

volumes:
  postgres_data:
  neo4j_data:
  redis_data: